有些组件需要脱离React去访问外部系统，如浏览器API，网络请求，直接访问dom元素等。这个时候就需要一些脱围机制。


1、useRef(initialValue)
可以在渲染中保存内容，useRef会返回一个包含current属性的对象，内容保存在current中。修改current不会触发重新渲染。
作用：使用useRef记录外部系统的信息，如timeoutID/DOM节点/需要记录但不用于渲染的信息。因为不参与渲染，所以在渲染期间读取current是不可靠的
*useRef像是使用useState去保存该对象，并且不暴露对应的setState方法，这样我们只能修改current，而不能通过setState方法触发重新渲染。

使用Ref来记录DOM节点
	#1、内置组件包含了一个ref属性，将useRef()返回的对象传入。
	#2、React在渲染(组件调用)阶段之后的提交阶段设置ref.current。更新DOM前，current设置为null；更新DOM后，React立即将current设置为对应的DOM节点。
	#3、获取的DOM节点可以做一些不修改视图内容的操作，如聚焦/滚动/测量。但不能修改其内容，这会使得React无法同步视图导致不一致的外观甚至崩溃。（如果React永远不会更新那个DOM节点，则可以修改）。
	#4、自定义组件默认无法使用ref属性，因为React不允许组件访问其他组件的DOM节点。如果想要访问，则需要组件使用forwardRef转化为可以传递ref属性的组件。然后可以将父组件传递的ref递给自己的内置组件。*组件内部还可以使用useImperativeHandle(ref, () =>obj)，返回一个obj给父组件传递的ref.current，这样做可以限制obj来限制父组件的可调用范围。
	#4、组件的ref属性，除了传递一个useRef返回的对象。还可以传递一个(nodeObj)=>func回调函数，当挂载对象时，参数为对应的对象；移除对象时，参数为null，并且返回的func在移除对象时会被调用。


2、useEffect
由渲染本身引发的副作用，用于将组件与某些外部系统同步。在提交阶段结束，页面更新后运行。
例：
useEffect(() => {
	//提交阶段结束后执行
	return ()=>{
		//做清理操作
	}
}, relayArray);
---------------------------------------
使用：
	#1、使用useEffect声明。默认情况每次渲染会触发Effect。每次Effect是相互独立的，会读取对应渲染的值，如state的快照值。
	#2、指定依赖项。通过useEffect的第2个参数指定依赖项数组，组件渲染过程中的响应式值（因渲染而变动的值。即props,state,组件内的变量）当被Effect读取时则应该作为其依赖项。每次渲染时，如果所有依赖项相同则不会触发Effect。（React使用Object.is比较依赖项）。
	当依赖数组为undefined时，Effect每次都会被执行；依赖项为空数组[]时，Effect只会在组件挂载时运行（即组件对应的DOM首次被提交显示在页面上）。
	#3、添加cleanup函数。React会在每次Effect重新运行之前调用清理函数，并在组件卸载时最后一次调用清理函数。
	严格模式下，React会在组件首次挂载后重新挂载一次（组件的state和所创建DOM会保留），这会使得Effect对应的被执行2次来帮助你发现错误。

*如何移除依赖项：linter会帮你检查Effect中的响应式值是否添加到依赖项中，但有时需要优化你的Effect来移除不必要的依赖。
	#1、响应特定交互的代码应该移至事件处理函数。
	#2、不同依赖项影响的是Effect的不同部分，则应该拆分。
	#3、Effect中想根据以前的状态更新状态，则考虑使用更新函数。
	#4、Effect想读取响应式值而不依赖它，则将非反应的代码提取至EffectEvent。
	#5、尽量避免依赖对象和函数，因为它们很可能每次被重新创建，使得依赖频繁变动。
	#6、考虑将值移动到组件外部，或Effect内部，这些地方的值不是在渲染过程中计算的。

*注意项：
	#1、对于服务端渲染来说，Effect不会在服务端中运行。
	#2、使用Effect进行数据请求很常见，但有一些问题：数据无法预先加载；多次请求的竞态条件；容易产生网络瀑布（即串行的请求，父组件渲染提交后才请求，获取数据才渲染子组件；子组件渲染提交后才进行自身的请求）。解决方式：使用React框架的内置数据获取机制；将数据请求提升到路由层次或预加载（如在根组件所在模块的顶层代码调用）；为请求添加去重/缓存功能；实现清除逻辑。


3、useEventEffect
Effect中使用的响应式值必须作为依赖项，当依赖项变动，则Effect会执行。当想要在Effect中编写一段非响应的代码却用到了响应式值，则可以使用useEventEffect。
例：
const onConnected = useEffectEvent(() => {
	showNotification('Connected!', theme); //theme来自于props，但是theme变动不应该导致消息弹出。
});
//然后在useEffect中调用onConnected()

使用：
	#1、使用useEffectEvent从Effect中提取非响应逻辑。
	#2、在EffectEvent中读取最新的响应式值。（EventEffect永远能观察到最新的响应值，而不像Effect只会读取对应渲染的快照值。）

注意项：
	#1、创建的EffectEvent只能在Effect中调用。
	#2、不能传递给其他组件或Hook，取而代之的是在对应位置声明EffectEvent。


4、自定义Hooks
必须以use开头，且为纯函数。一般用于给更加具体有目的性的逻辑创建自定义Hooks。
自定义Hooks共享的是逻辑，而不是状态本身。
自定义Hooks应该将参数视为不可变的，同样Hooks返回的值也应该视为不可变的。