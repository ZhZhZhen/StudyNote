1、定义组件
React组件由函数组件和类组件两种。
现在常使用函数组件，其以大写字母开头命名（以小写字母开头会被认为是HTML标签），并返回JSX标签。
避免在组件中定义其他组件，取而代之的是在顶层定义每个组件。
如：
export default function Profile() {
  return (
    <img src="imgSrcUrl"/>
  )
}
*根据项目配置，大多数情况根组件定义在App.js文件中（默认情况）；对于基于文件进行路由的框架，每个页面的根组件都会不一样。

2、JSX
作为JS语言的语法扩展，JSX元素并不是真实的DOM节点，只是像图纸一样的简单描述。
作用：
	#1、将渲染逻辑和标签共同存放在一个地方，在更新代码时保持同步。
	#2、隔离彼此无关的逻辑，UI不再是全放在HTML中。
规则：
	#1、只能返回一个根元素，想返回多个元素使用Fragment或<></>包裹。
	#2、标签必须闭合。
	#3、标签的大部分属性采用驼峰命名法
	#4、在标签内的文本和属性中使用{}来使用JS的逻辑和变量，{{和}}表示的是JSX花括号内的JS对象

3、组件的Props
一个组件只有一个参数，即Props，这是一个对象。在内置元素中它的类型是预定义的；在自定义组件中取决于定义组件时的参数
Props包含一个children属性，用来表示自己子组件。
Props是不可变的，每次渲染会收到新的Props。
不要在一个对象作为属性传递给JSX后修改该对象。

4、条件渲染
使用条件语句返回JSX表达式。当返回的是null/undefined/false时，React不会进行渲染，但是依然会在渲染树中占据一个位置。
JSX中可以通过使用三元运算符?:来选择内容；可以使用与运算符&&来决定返回false或是右边的内容；可以将JSX赋值给变量并在{}中使用。
&&的本质是从左到右求值，返回第一个假值操作数的值，如果都为真则会返回最后一个操作数的值。所以避免在左边直接使用数字来进行条件判断，当数字为0的时候，判断为假但返回的是0，会使React渲染'0'这个内容。

5、渲染列表
JSX元素支持在子元素的位置使用JSX元素数组
使用map将普通js数组转化为JSX元素数组；使用filter来过滤数组。
每个数组成员需要使用key属性标识唯一性，这将帮助React在增删元素时进行比对。若不使用key默认为数组索引，并且key没法通过props来进行访问。key在兄弟节点中必须唯一，并且不能改变。

6、保持组件纯粹
如何保持：
	#1、只负责自己的任务，不修改函数调用前已有的对象/变量；
	#2、输入相同，则输出相同。
作用：
	#1、可以在不同环境下执行，如服务端。
	#2、帮助React跳过渲染那些输入未更改的组件，提高性能。
	#3、使React可以安全地停止计算，不会去做过时的渲染。（渲染深层组件树时数据发生变化，可以立刻重新渲染）
使用<React.StrictMode>包裹根组件，这样组件渲染会执行两次来帮助发现错误。（生产环境不生效）。
避免在渲染时出现副作用（渲染时应保持存粹），可以的话使用事件处理程序代替，最后再考虑useEffect执行副作用（提交DOM后执行）。
*保持组件幂等性是重要的。如果多次调用组件是安全的，不会影响其他组件渲染，React不严格要求百分比纯粹。

7、渲染树
由渲染的组件组成，根部是根组件。不是HTML元素，因为React应用不止应用于Web，还有桌面/移动端，所以渲染树的概念只包含了组件。

