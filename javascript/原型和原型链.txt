1、原型：prototype
js的大部分函数可以作为构造函数使用，这些函数包含prototype属性作为原型，而prototype.constructor则指向构造函数。
每个实例都含有一个[[prototype]]内部属性指向其构造函数的prototype，prototype上的方法和属性对所有子类实例是共享的，可以被子类实例访问。

2、原型链
对象被创建时会有一个内部属性[[prototype]]指向构造函数的prototype；
而构造函数的prototype也包含了[[prototype]]指向上一个构造函数的prototype；
最终会指向Object.prototype，而Object.prototype.[[prototype]]为null。
----------------------------------
对于class关键字声明的类来说：
其构造方法的[[prototype]]指向父构造方法（这是为了继承构造方法上的静态方法，只有显式使用了extends关键字才会具有该链）；
其构造方法的prototype的[[prototype]]则指向父构造方法的prototype。

3、查找对象属性的过程
即顺着原型链进行查找。
对象首先查找自身属性，若没找到则查找原型上的属性，若没找到则查找原型的原型，以此类推，最终Object.prototype.[[prototype]]为null，即查找终止。

4、补充说明
#1、使用Object.create(prototype)可以创建一个以参数为原型的对象，当传递null时会创建一个没有原型的对象。
#2、使用Object.setPrototypeOf(obj,prototype)可以设置或修改一个对象的原型。
#3、所有函数都是Function的实例，包括Object和Function本身，因此Object.[[prototype]]指向的是Function.prototype，Function.[[prototype]]与Function.prototype是同一个对象。
#4、Function.prototype指向的是一个内部函数，虽然是函数但是该内部函数没有prototype。但是该原型的[[prototype]]指向的是Object.prototype，这说明了函数本身也是一个对象，可以访问Object原型上的属性。