Vue将测试分为：单元测试，组件测试，端到端测试

1、单元测试：检测函数，类，组合式函数的输入是否产生预期的输出或副作用。验证小的，独立的代码单元是否按预期工作，侧重逻辑的正确性。通常会对独立的代码单元模拟输入，并检查输出。
推荐方案：Vitest，Jest
说明：
#1、对组件使用单元测试，是白盒的，会知晓组件的实现细节，并专注于独立的测试（如模拟子组件，模拟状态）。
#2、对组合式函数的测试分为是否依赖宿主组件实例。若组合式函数使用生命周期钩子，供给/注入API则依赖组件实例。若不依赖组件实例可以直接调用；若依赖组件实例需要被包装在一个宿主组件中进行测试（创建一个组件在setup函数中调用组合式函数，并存储其返回结果。创建一个应用将该组件作为根组件并挂载运行）。如果组合式函数非常复杂，推荐的方式是将其包装在一个组件中，对该组件进行组件测试。


2、组件测试
组件是否正常挂载和渲染，是否可以交互，以及表现是否预期。组件测试应该是黑盒测试，不关心内部实现细节，不应该模拟子组件，而应该像用户一样通过与组件互动来进行测试。通常来说会模拟prop，事件，插槽这些对外接口的输入，模拟交互（如点击）行为，并检查渲染结果。
推荐方案：Vitest，Cypress（基于浏览器）,Nightwatch，WebdriverIO。推荐库@vue/test-utils
说明：
#1、不要去断言组件的私有状态或私有方法，大部分情况应该专注于DOM输出。
#2、想测试组件的方法，应该提取到独立的函数中进行单元测试。
#3、基于浏览器的测试方案能捕捉样式，原生DOM，本地存储，网络等问题，但是运行速度更慢。


3、端到端测试：检测跨越多个页面的功能，并进行实际的网络请求。侧重点是多页面的应用表现，不导入应用代码，而是完全依靠在真实浏览器中浏览整个页面来进行测试。
推荐方案：Cypress，Playwright，Nightwatch，WebdriverIO
说明：
#1、测试浏览器覆盖率的时候应该权衡利弊，理论上应该100%覆盖率，但实际上测试回报是递减的。
#2、无头模式的测试指的是在不带界面的浏览器中运行。现代方案通常在错误发生时，应该可以查看应用的快照，视频。