web应用性能的主要两个方面：
#1、页面加载性能：首次访问时，应用展示出内容与达到可交互状态的速度。
#2、更新性能：应用响应用户输入更新的速度。

分析方式
#1、生产环境中可以使用PageSpeed Insights，WebPageTest进行负载性能分析
#2、本地开发期间可以使用chrome开发者工具的性能面板（app.config.performance将会开启Vue特有的性能标记）；或安装Vue开发者扩展插件。

优化手段
页面加载优化：
#1、选择正确的架构：如果对页面加载性能敏感，应避免使用纯客户端的单页应用。可以使用SSR/SSG缓解。
#2、包体积和Tree-shaking优化：尽可能地采用构建步骤（这样不会打包未使用地模块，以及HTML模板可以预编译避免引入Vue编译器）；尽可能使用ES模块格式的依赖（对树摇优化友好）；渐进式增强的场景下若想避免构建步骤，考虑使用petite-vue。
#3、代码分割：打包工具可以分析ESM动态导入语法自动进行代码分割。搭配异步组件或支持懒加载的Vue Router可以减少首屏加载的代码。

更新优化：
#1、保持Props稳定：Vue中子组件只会在至少一个Props改变时才更新。使用适当的方式减少Props的变动。
#2、v-once指令：仅渲染元素和组件一次（包括子元素，子组件），并跳过之后的更新。与v-memo="[]"表现一致（空数组）。
#3、v-memo：用于有条件的跳过某些大型子树或v-for列表的更新，使用时传递一个依赖数组，其中未变动时将会跳过更新。如v-memo="[valueA, valueB]"。
#4、计算属性的稳定性：计算属性如果返回值未变动（即使求值需要的源值变动了）则不会触发副作用。所以考虑使用计算属性包装一些计算，并在返回对象时谨慎处理（因为每次创建对象都是一个新值）

通用优化：
#1、虚拟列表：用于处理数量非常多的列表。推荐库vue-virtual-scroller, vue-virtual-scroll-grid, vueuc/VVirtualList
#2、减少大型不可变数据的响应性开销：Vue的响应性系统默认是深度的，使用shallowRef/shallowReactive创建响应值/响应对象只在其顶层是响应式的，对深层对象不会做任何处理。
#3、避免不必要的组件抽象：组件抽象会导致应用中的组件实例增加，这会增加性能消耗。