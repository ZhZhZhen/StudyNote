1、如何产生响应性
Vue3中通过Proxy来创建响应式对象，通过getter/setter创建ref。
在proxy的get/ref的getter中会对对象的key进行追踪track()。
在proxy的set/ref的setter中会查找对象的key，并进行trigger()触发订阅者。

# track()中，会检查当前是否有正在执行的副作用（一般读属性操作在副作用中，副作用开始时会被设置为当前正在执行的副作用），若有则将副作用注册为该对象的该属性的订阅者（Set集合中）。以整体来看副作用的订阅存储在全局的WeakMap<target, Map<key, Set<effect>>>中，若第一次追踪没有找到相应容器，则会在getSubscribersForProperty函数中新建。
# trigger()中，会查找该对象的该属性的所有订阅者，并依次执行他们。
# 侦听器/计算属性函数的实现：我们所传递给侦听器/计算属性的回调update会被用于创建一个新的副作用函数effect，effect内部会把activeEffect设置为自己，然后执行update，之后把activeEffect置空。创建完的effect会立刻执行一次，在update内部响应值的读操作就会触发track()并将activeEffect设为响应对象的属性的订阅者。

说明：
#1、因为为对象创建了proxy，所以在解构proxy的基元值时，读写解构变量是非响应的；并且代理和原始对象不是同一个对象（===为false）。
#2、WeakMap是一个key只能为引用类型的容器，并且不会被计入垃圾回收策略，这意味着原引用被回收，该key也会自动移除。
#3、能自动跟踪依赖，并在依赖改动时重新运行的副作用称为响应式副作用。Vue保持组件状态和DOM同步的方式，也采用了响应式副作用——每个组件实例创建一个响应式副作用来渲染和更新DOM。
#4、Vue的响应式系统是基于运行时的，无需额外构建步骤，受JS本身语法制约；而一些框架如Svelte采用编译时实现响应性，它对代码进行分析和转化（隐式的注入依赖分析和触发代码），这样做需要额外构建步骤，改变了原代码JS的语义。（说白了就是运行时源代码和目标代码一致；编译时目标代码相比源代码做了额外工作）。


2、响应性调试
#1、组件调试：使用onRenderTracked/onRenderTriggered生命周期钩子来查看哪个依赖正在被使用/正在触发更新。
#2、计算属性调试：computed的第二个参数可以传递一个对象，该对象可以使用onTrack/onTrigger回调，该回调会作为组件调试的钩子接收相同参数。
#3、侦听器调试：watch的第三个参数/watchEffect的第二个参数可以传递一个对象，该对象可以使用onTrack/onTrigger回调。
说明：
#1、上述调试仅在开发模式中生效。
#2、回调会收到调试事件DebuggerEvent包含了触发事件的依赖信息。


3、与外部状态系统集成
通常要避免使用ref/reactive，因为外部系统也可能使用了proxy。
集成思路为使用shallowRef（具有浅层响应性），并在外部状态变更时，通过修改shallowRef.value来进行同步。
RxJS可以使用集成库@vueuse/rxjs


