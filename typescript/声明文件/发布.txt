当你编写一个库供他人使用时，需要对应的声明文件，他人在使用才会有类型支持
如果只是自己的项目，不打算写成库给他人使用，则无所谓生成声明文件

1、自动生成声明文件
如果使用typescript编写代码，则在编译选项中declaration设置为true，那么输出的代码就会包含js和dts代码
编译选项说明：
declaration：告知编译器生成dts声明文件，默认情况下放置在对应js的代码旁边
declarationDir：设置生成的dts文件目录
emitDeclarationOnly：只生成dts文件，不生成js文件
declarationMap：对每个dts文件，都生成对应的.d.ts.map(sourcemap)文件

2、发布声明文件
声明文件和源码在一起：
#如果声明文件由tsc编译自动生成，那么将源码和声明文件一起发布即可。
#如果项目本身是js编写，声明文件是自己额外手动编写的话，那么需要对项目package.json文件进行配置才能让别人在使用的时候有类型支持。编译器首选查找package.json的typesVersions对象(该对象可以根据不同的ts版本去设置不同的dts文件路径)，如果找不到则查找types(typing)申明的路径，如果找不到则查找main申明的文件路径对应的同名dts文件，如果找不到则查找根目录下的index.d.ts文件。如果还找不到则认为该项目没有声明文件。

发布到@types下：
实际上是发布到DefinitelyTyped这个仓库下，该仓库的types目录包含了所有上传到@types的声明文件。查看仓库的pull-request规范进行声明文件上传

3、package.json的依赖
dependencies：会打包到结果中
devDependencies：不会打包到结果中，有些库只是为了执行命令行，不是项目所依赖的内容则可以放到这里

比如说想编写一个依赖于其他库的扩展库，那么我们可以把该库的@types/声明文件放到dependencies，这样别人使用我们的扩展库时，就不用引入原有库的声明文件，即可获得原有库的类型支持。
但如果我们不想发布声明文件(比如编写网页)，那么@types/声明文件就可以放到devDependencies下。