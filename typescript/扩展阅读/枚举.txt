1、枚举内容中可以是字符串，数值，其他枚举的成员引用
如：
enum Direction {
  Up,
  Down = "DOWN",
  Left = 1,
  Right,
}
默认情况下无初始值的成员在首项为0，后续加一递增；无初始值的成员要么在首位，要么排在数字常量成员后面；值也可以是动态计算获得的数值(只有数字枚举适用)。
#声明文件中的枚举成员如果无初始值，则会被认为是计算获得

2、联合枚举
当枚举的成员为：无初始值，字符串，纯正负数字(无其他运算符号)。这样的枚举实际类型是其成员的联合类型
联合枚举的成员都可以充当类型(普通枚举只有枚举本身能做类型)

3、运行时的表现形式
枚举在运行时就是一个对象，每个枚举成员对应该对象的一个key，其中数字枚举成员还拥有一个以值作为key的反向映射
比如上述Direction[1]为Left，Direction[Left]为1，Direction[Down]为DOWN

4、常量枚举
在声明枚举前使用const。这样的枚举在编译时其成员的值会内联到对应的代码位置，所以常量枚举在运行时不存在对应的对象。
#常量枚举伴随着一些问题，比如常量枚举的支持需要分析整个项目的类型，但是对于如Babel这样单独文件进行编译的编译器是做不到。使用linter在开发中避免使用常量枚举，或在编译时使用插件将常量枚举转为普通枚举
声明常量枚举如：
const enum SomeEnum {
  A = 1,
  B = 2,
}