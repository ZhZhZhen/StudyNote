#目前为实验性功能，需在tsconfig配置experimentalDecorators:true,  target: ES5

1、装饰器和装饰工厂
用于修饰类或类成员，在类加载的时候执行。装饰器可以对所修饰的内容进行修改调整。
装饰器：是一个函数，其参数根据使用的地方不同，有不同的固定参数。使用装饰器时在对应地方使用@decoratorName
装饰工厂：是一个返回装饰器函数的函数。使用装饰工厂时在对应地方使用@factoryName()


2、执行顺序
整体来说：
#1先执行工厂函数，#2后执行装饰器函数

对于一个目标使用多个装饰时：
从上到下执行工厂函数(并统计装饰器函数)，然后从下到上执行装饰器函数

对于一个类：
#1实例成员阶段：从上到下按顺序执行，每个成员先执行工厂函数，后执行装饰器函数
#2静态成员阶段：同上
#3构造函数阶段：同上
*一个方法中的顺序：#1方法工厂函数；#2靠前参数工厂函数；#3靠后参数工厂函数；#4依据前面的顺序，倒序执行装饰器函数


3、各装饰器
类装饰器：修饰类，应用于类的构造函数。参数为(构造函数)。其返回值用于替换原构造函数。
方法装饰器：修饰方法。参数为(构造函数或原型，成员名称，成员属性描述符)。其返回值用于替换方法的属性描述符。
访问器装饰器：修饰get/set。参数为(构造函数或原型，成员名称，成员属性描述符)。其返回值用于替换方法的属性描述符。
属性装饰器：修饰类中声明的变量。参数为(构造函数或原型，成员名称)。返回值被忽略。
参数装饰器：修饰方法的参数。参数为(构造函数或原型，成员名称，参数在函数中的序号索引)。返回值被忽略。

#上述装饰器的第一个参数"构造函数或原型"解释：当装饰器用于静态成员时，该参数为构造函数；用于实例成员时，该参数为原型。
#属性描述符对象中，value属性对应于方法，get属性对应于get访问器，set属性对应于set访问器。替换后相当于把原方法/原访问器替换了
#访问器装饰器同时作用于一个属性的get/set，所以只能在get/set其中之一使用该装饰器。
