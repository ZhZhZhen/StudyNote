**************************************compilerOptions*************************************
noImplicitAny：遇到any类型的变量时，编译抛出错误

strictNullChecks：空处理检查，未处理空会编译出错

strictPropertyInitialization：强制类的实例属性必须有初值，或在构造函数中初始化

esModuleInterop：开启后用于兼容不同模块语法(如CommonJs和esm)的转译。原因在于cjs没有默认导出概念，在esm代码环境下使用cjs库(我们写代码一般使用esm语法，而大部分第三方库采用cjs语法)，cjs库在转义时默认导出的内容会赋值到一个对象的default属性上再返回这个对象

jsx：决定tsx编译后的结果，preserve保留文件和扩展名；react把对应标签转为React.createElement，扩展名改js；react-native保留文件，扩展名改js
jsxFactory：针对jsx中的react模式，用于替换默认的React.createElement行为。

isolatedModules：标识项目采用独立的文件处理。(如：强制要求使用import type关键字对类型进行导入。因为类似Babel的编译是单个文件进行编译，没法像tsc那样对整个项目进行分析，所以无法判断导入的内容是否为类型(因为类型在编译后要删除)，所以使用该关键字可以帮助这些编译器识别类型代码)

allowJs：允许编译中接受js文件

noImplicitThis：开启时，当方法中使用到this关键字，却没在参数列表声明时，会进行错误提示

noEmit：禁止从编译中发出文件。在别的编译器编译ts代码，而tsc只做类型检查时使用

noEmitOnError：当出现类型检查或语法错误时，不再输出js和dts文件。(默认情况下出错依然会输出)

sourceMap：生成映射文件，映射文件可以用于建立源文件和编译结果文件之间的映射，这样可以支持debug时对源文件的信息显示，以及通过编译文件进行方法跳转/编辑源文件等功能

***********************************************watchOptions**********************************************
用于配置监听策略来如何监听文件和目录。采用的是node的fs.watch/fs.watchFile实现。fs.watch采用文件系统的事件通知，不可靠，不同的系统有不同工作预期，并且监视数量受限制，一般用于监听目录。fs.watchFile采用轮询，涉及CPU周期，比较可靠，CPU使用率取决于监听的数量，一般用于监听文件

watchFile：配置监听文件的策略
watchDirectory：配置监听目录的策略
fallbackPolling：当文件系统监听数量耗尽或不支持文件系统时所采取的策略
synchronousWatchDirectory：当文件修改时，同步触发目录的监听器
excludeFiles：配置不需要监听的文件
excludeDirectories：配置不需要监听的目录

********************************************其他顶级属性*****************************************
extends：指定一个tsconfig文件的路径，并继承其配置
files：指定编译的入口文件
include：指定编译的文件夹
exclude：用于在编译时排除其指定的文件和文件夹
references：用于配合tsc -build来进行构建，可以将项目划分为多个子项目并进行依赖

