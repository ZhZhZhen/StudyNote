CSS性能优化
渲染优化
1、删除不必要的样式。不要将样式应用于不需要的元素。
2、将CSS拆分成独立模块。如针对不同设备的css进行拆分并搭配媒体查询选择性的加载。
3、最小化和压缩CSS。如使用打包工具去除CSS中的空格，对CSS文件进行gzip压缩。
4、简化选择器。使用优先级低且通用的选择器，避免复杂的选择器。
5、使用CSS精灵图减少HTTP请求。CSS精灵图可以将多个小图像放入单个图像文件中，然后使用background-position显示其一部分。
6、预加载重要资源。使用rel='preload'的link标签去预先加载需要的资源。
7、字体优化。字体只在实际用到时才加载，考虑使用预加载提前加载；若是只使用特定字符，则可以对字体进行子集化处理，并使用unicode-range表明在范围内的字符才触发加载；通过font-display兜底字体加载失败时显示备用字体。
8、CSS局限优化。contain局限属性可以用于表明一些如布局/绘制/尺寸变化操作只局限于当前元素内部，这样该元素内部变动时可能进行优化不触发外部元素的布局和重绘；content-visibility: auto可开启布局/样式/绘制局限，并跳过那些于用户无关的元素的渲染（如元素远离于当前视口）

动画优化
1、通过媒体查询prefers-reduced-motion来根据用户设置决定是否显示动画。
2、尽可能使用CSS动画，而不是JS动画。
3、减少触发回流重绘的次数。尽量避免修改width/height等元素尺寸，top/left等元素定位，元素布局。而是采用transform。
4、提升合成层来启用GPU处理动画。

-------------------------
HTML性能优化
HTML本身文本内容较小，因此下载和渲染速度通常很快，影响网页的性能问题主要在#1、图像和视频文件的大小；#2、嵌入内容<iframe>；#3、资源加载顺序；
1、响应式处理图像/视频。如使用媒体查询，img标签的srcset,sizes属性；picture标签使用source标签；video标签使用source标签
2、内容懒加载：img标签支持loading='lazy'来设置懒加载（用户可见时才进行加载）；video标签支持preload='none'让视频不进行预加载
3、处理嵌入内容：避免使用iframe标签，因为非同源时无法共享缓存资源；需要额外的HTTP请求加载内容；额外创建页面实例。使用网络请求获取数据并通过js脚本添加UI来代替iframe；iframe同样支持loading='lazy'进行懒加载；内容简单的页面考虑使用src属性以base-64编码的内容填充iframe；或使用srcdoc属性以HTML代码对内容进行填充。
4、处理资源加载顺序：script标签使用async/defer进行加载；link标签属性rel='preload'来设置预加载，rel的其他值也可以帮助加速页面加载。